// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;
using TMS.Payments.Persistence.Projections;

namespace Marten.Generated.EventStore
{
    // START: PaymentViewProjectionLiveAggregation637459534
    public class PaymentViewProjectionLiveAggregation637459534 : Marten.Events.Aggregation.SyncLiveAggregatorBase<TMS.Payments.Domain.Views.PaymentDetailsView>
    {
        private readonly TMS.Payments.Persistence.Projections.PaymentViewProjection _paymentViewProjection;

        public PaymentViewProjectionLiveAggregation637459534(TMS.Payments.Persistence.Projections.PaymentViewProjection paymentViewProjection)
        {
            _paymentViewProjection = paymentViewProjection;
        }


        public System.Action<TMS.Payments.Domain.Views.PaymentDetailsView, TMS.Payments.Domain.DomainEvents.PaymentCreatedEvent> ProjectEvent1 {get; set;}

        public System.Action<TMS.Payments.Domain.Views.PaymentDetailsView, TMS.Payments.Domain.DomainEvents.PaymentStatusUpdated> ProjectEvent2 {get; set;}


        public override TMS.Payments.Domain.Views.PaymentDetailsView Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, TMS.Payments.Domain.Views.PaymentDetailsView snapshot)
        {
            if (!events.Any()) return null;
            TMS.Payments.Domain.Views.PaymentDetailsView paymentDetailsView = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public TMS.Payments.Domain.Views.PaymentDetailsView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new TMS.Payments.Domain.Views.PaymentDetailsView();
        }


        public TMS.Payments.Domain.Views.PaymentDetailsView Apply(Marten.Events.IEvent @event, TMS.Payments.Domain.Views.PaymentDetailsView aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TMS.Payments.Domain.DomainEvents.PaymentCreatedEvent> event_PaymentCreatedEvent5:
                    aggregate.Apply(event_PaymentCreatedEvent5.Data);
                    ProjectEvent1.Invoke(aggregate, event_PaymentCreatedEvent5.Data);
                    break;
                case Marten.Events.IEvent<TMS.Payments.Domain.DomainEvents.PaymentStatusUpdated> event_PaymentStatusUpdated6:
                    aggregate.Apply(event_PaymentStatusUpdated6.Data);
                    ProjectEvent2.Invoke(aggregate, event_PaymentStatusUpdated6.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: PaymentViewProjectionLiveAggregation637459534
    
    
    // START: PaymentViewProjectionInlineHandler637459534
    public class PaymentViewProjectionInlineHandler637459534 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid> _storage;
        private readonly TMS.Payments.Persistence.Projections.PaymentViewProjection _paymentViewProjection;

        public PaymentViewProjectionInlineHandler637459534(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid> storage, TMS.Payments.Persistence.Projections.PaymentViewProjection paymentViewProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _paymentViewProjection = paymentViewProjection;
        }


        public System.Action<TMS.Payments.Domain.Views.PaymentDetailsView, TMS.Payments.Domain.DomainEvents.PaymentCreatedEvent> ProjectEvent1 {get; set;}

        public System.Action<TMS.Payments.Domain.Views.PaymentDetailsView, TMS.Payments.Domain.DomainEvents.PaymentStatusUpdated> ProjectEvent2 {get; set;}


        public override async System.Threading.Tasks.ValueTask<TMS.Payments.Domain.Views.PaymentDetailsView> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<TMS.Payments.Domain.Views.PaymentDetailsView, System.Guid> slice, Marten.Events.IEvent evt, TMS.Payments.Domain.Views.PaymentDetailsView aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<TMS.Payments.Domain.DomainEvents.PaymentStatusUpdated> event_PaymentStatusUpdated8:
                    aggregate ??= new TMS.Payments.Domain.Views.PaymentDetailsView();
                    ProjectEvent2.Invoke(aggregate, event_PaymentStatusUpdated8.Data);
                    return aggregate;
                case Marten.Events.IEvent<TMS.Payments.Domain.DomainEvents.PaymentCreatedEvent> event_PaymentCreatedEvent7:
                    aggregate ??= new TMS.Payments.Domain.Views.PaymentDetailsView();
                    ProjectEvent1.Invoke(aggregate, event_PaymentCreatedEvent7.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public TMS.Payments.Domain.Views.PaymentDetailsView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new TMS.Payments.Domain.Views.PaymentDetailsView();
        }

    }

    // END: PaymentViewProjectionInlineHandler637459534
    
    
}

